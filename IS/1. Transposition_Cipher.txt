

import java.io.*;
import java.util.*;
// Class
// For transposition cipher
public class Tr {
    // Member variables of this class
    public static String selectedKey;
    public static char sortedKey[];
    public static int sortedKeyPos[];
    // Constructor 1 of this class
    // Default constructor defining the default key
    public Tr() {
        selectedKey = "megabuck";
        sortedKeyPos = new int[selectedKey.length()];
        sortedKey = selectedKey.toCharArray();
    }
    // Constructor 2 of this class
    // Parameterized constructor defining the custom key
    public Tr(String mykey) {
        selectedKey = mykey;
        sortedKeyPos = new int[selectedKey.length()];
        sortedKey = selectedKey.toCharArray();
    }
    // Method 1 - doProcessOnKey()
    // To reorder data do the sorting on selected key
    public static void doProcessOnKey() {
        // Find position of each character in selected key
        // and arranging it in alphabetical order
        int min, i, j;
        char orginalKey[] = selectedKey.toCharArray();
        char temp;
        // Step 1: Sorting the array of selected key
        // using nested for loops
        for (i = 0; i < selectedKey.length(); i++) {
            min = i;
            for (j = i; j < selectedKey.length(); j++) {
                if (sortedKey[min] > sortedKey[j]) {
                    min = j;
                }
            }
            if (min != i) {
                temp = sortedKey[i];
                sortedKey[i] = sortedKey[min];
                sortedKey[min] = temp;
            }
        }
        // Step 2: Filling the position of array
        // according to alphabetical order
        // using nested for loops
        for (i = 0; i < selectedKey.length(); i++) {
            for (j = 0; j < selectedKey.length(); j++) {
                if (orginalKey[i] == sortedKey[j])
                    sortedKeyPos[i] = j;
            }
        }
    }
    // Method 2 - doEncryption()
    // To encrypt the targeted string
    public static String doEncryption(String plainText) {
        int min, i, j;
        char orginalKey[] = selectedKey.toCharArray();
        char temp;
        doProcessOnKey();
        // Step 3: Generating the encrypted message by
        // doing encryption using Transpotion Cipher
        int row = plainText.length() / selectedKey.length();
        int extrabit
                = plainText.length() % selectedKey.length();
        int exrow = (extrabit == 0) ? 0 : 1;
        int rowtemp = -1, coltemp = -1;
        int totallen = (row + exrow) * selectedKey.length();
        char pmat[][] = new char[(row + exrow)]
                [(selectedKey.length())];
        char encry[] = new char[totallen];
        int tempcnt = -1;
        row = 0;
        for (i = 0; i < totallen; i++) {
            coltemp++;
            if (i < plainText.length()) {
                if (coltemp == (selectedKey.length())) {
                    row++;
                    coltemp = 0;
                }
                pmat[row][coltemp] = plainText.charAt(i);
            } else {
                // Padding can be added between two
                // consecutive alphabets or a group of
                // alphabets of the resultant cipher text
                pmat[row][coltemp] = '-';
            }
        }
        int len = -1, k;
        for (i = 0; i < selectedKey.length(); i++) {
            for (k = 0; k < selectedKey.length(); k++) {
                if (i == sortedKeyPos[k]) {
                    break;
                }
            }
            for (j = 0; j <= row; j++) {
                len++;
                encry[len] = pmat[j][k];
            }
        }
        String p1 = new String(encry);
        return (new String(p1));
    }
    // Method 3 - doEncryption()
    // To decrypt the targeted string
    public static String doDecryption(String s) {
        int min, i, j, k;
        char key[] = selectedKey.toCharArray();
        char encry[] = s.toCharArray();
        char temp;
        doProcessOnKey();
        // Step 4: Generating a plain message
        int row = s.length();
        selectedKey.length();
        char pmat[][] = new char[row][(selectedKey.length())];
        int tempcnt = -1;
        for (i = 0; i < selectedKey.length(); i++) {
            for (k = 0; k < selectedKey.length(); k++) {
                if (i == sortedKeyPos[k]) {
                    break;
                }
            }
            for (j = 0; j < row; j++) {
                tempcnt++;
                pmat[j][k] = encry[tempcnt];
            }
        }
        // Step 5: Storing matrix character in
        // to a single string
        char p1[] = new char[row * selectedKey.length()];
        k = 0;
        for (i = 0; i < row; i++) {
            for (j = 0; j < selectedKey.length(); j++) {
                if (pmat[i][j] != '*') {
                    p1[k++] = pmat[i][j];
                }
            }
        }
        p1[k++] = '\0';
        return (new String(p1));
    }
    @SuppressWarnings("static-access")
    // Method 4 - main()
    // Main driver method
    public static void main(String[] args) {
        // Creating object of class in main method
        Tr tc = new Tr();
        // Printing the ciphere text
        // Custom input - Hello Geek
        System.out.println("Cipher Text : " +
                tc.doEncryption("Hello Mayuresh"));
    }
}















/*
The code defines a public class named Tr, which represents the transposition cipher.

The class has three member variables: selectedKey (stores the selected key for encryption/decryption), sortedKey (stores the sorted version of the key), and sortedKeyPos (stores the positions of characters in the sorted key).

The class has two constructors: Tr() is the default constructor that defines a default key ("megabuck"), and Tr(String mykey) is a parameterized constructor that takes a custom key as input.

The doProcessOnKey() method is used to reorder the data by sorting the selected key. It finds the position of each character in the selected key and arranges them in alphabetical order.

The method uses nested loops for sorting the array of the selected key and then fills the position array according to alphabetical order.

The doEncryption(String plainText) method is used to encrypt the targeted string using the transposition cipher algorithm.

The method first calls the doProcessOnKey() method to process the selected key.

It then generates the encrypted message by performing encryption using the transposition cipher. The plain text is divided into rows and columns based on the length of the selected key.

The method creates a matrix to store the plain text characters and applies the transposition cipher algorithm to rearrange the characters based on the sorted key positions.

The encrypted message is stored in the encry character array and returned as a string.

The doDecryption(String s) method is used to decrypt the targeted string.

The method takes the encrypted message as input and applies the reverse process of encryption to generate the plain message.

It creates a matrix and stores the characters based on the sorted key positions.

The matrix characters are then converted into a single string and returned as the decrypted plain message.

The main() method is the entry point of the program.

Inside the main() method, an instance of the Tr class is created.

The doEncryption() method is called to encrypt the plain text "Hello Mayuresh".

The encrypted cipher text is printed as output.
*/